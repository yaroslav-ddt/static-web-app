# This is a basic workflow to help you get started with Actions

name: Terraform Apply

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  #push:
  #  branches: [ main ]
  #pull_request:
  #  branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_VAR_github_token: ${{ secrets.REPO_TOKEN }}
      TF_VAR_github_owner: ${{ github.actor }}
      TF_VAR_client_id: ${{ secrets.ARM_CLIENT_ID }}
      TF_VAR_client_secret: ${{ secrets.ARM_CLIENT_SECRET }}
      TF_VAR_tenant_id: ${{ secrets.ARM_TENANT_ID }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      #- name: Azure CLI Login
      #  run: az login --service-principal -u $(carmodel-clientid) -p $(carmodel-clientsecret) --tenant $(carmodel-tenantid)
      
      # Runs a single command using the runners shell
      - name: Terraform setup
        id: tf-setup
        uses: hashicorp/setup-terraform@v1.2.1
        #run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Terraform Init
        id: tf-init
        run: |
          terraform init \
            -backend-config="storage_account_name=$TF_STATE_BLOB_ACCOUNT_NAME" \
            -backend-config="container_name=$TF_STATE_BLOB_CONTAINER_NAME" \
            -backend-config="key=$TF_STATE_BLOB_FILE" \
            -backend-config="sas_token=$TF_STATE_BLOB_SAS_TOKEN"
        env:
            TF_STATE_BLOB_ACCOUNT_NAME:   ${{ secrets.TERRAFORM_SA_ACCOUNT }}
            TF_STATE_BLOB_CONTAINER_NAME: ${{ secrets.TERRAFORM_SA_CONTAINER }}
            TF_STATE_BLOB_FILE:           "swa-staticwebapp-yy.tfstate"
            TF_STATE_BLOB_SAS_TOKEN:      ${{ secrets.TERRAFORM_SA_SAS }}
            
      - name: Terraform Plan
        id: tf-plan
        run: terraform plan -out deployment.tfplan

          #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Terraform validation
        id: tf-validation
        run: terraform validate
          
      - name: Terraform Apply
        id: tf-apply
        run: terraform apply -auto-approve deployment.tfplan

      - name: App Settings
        id: app-settings
        run: |
          az login --service-principal -u ${{ secrets.ARM_CLIENT_ID }} -p ${{ secrets.ARM_CLIENT_SECRET }} --tenant ${{ secrets.ARM_TENANT_ID }}
          az staticwebapp appsettings set --name ${{ steps.tf-apply.outputs.swa_name }} --setting-names APPINSIGHTS_INSTRUMENTATIONKEY=${{ steps.tf-apply.outputs.ai_instrumentation_key }}"
        #env:
          #ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          #ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          #ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          #ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          #TF_VAR_github_token: ${{ secrets.REPO_TOKEN }}
          #TF_VAR_github_owner: ${{ github.actor }}
          #TF_VAR_client_id: ${{ secrets.ARM_CLIENT_ID }}
          #TF_VAR_client_secret: ${{ secrets.ARM_CLIENT_SECRET }}
          #TF_VAR_tenant_id: ${{ secrets.ARM_TENANT_ID }}
          #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}